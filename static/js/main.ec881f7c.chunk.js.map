{"version":3,"sources":["util.js","Map.js","Table.js","InfoBox.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["casesTypeColors","cases","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","showDataOnMap","casesType","map","country","Circle","countryInfo","lat","long","Math","sqrt","Popup","flag","prettyPrintStat","stat","numeral","format","Map","countries","center","zoom","className","TileLayer","url","attribution","Table","InfoBox","title","total","isRed","active","props","Card","onClick","CardContent","Typography","color","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","res","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","class","Name","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec881f7c.chunk.js","sourcesContent":["import {Circle,Popup} from \"react-leaflet\"\r\nimport React from \"react\"\r\nimport numeral from \"numeral\"\r\n\r\n\r\nconst casesTypeColors={\r\n   cases:{\r\n      hex:\"#CC1034\",\r\n      multiplier:800\r\n   },\r\n   recovered:{\r\n      hex:\"#7dd71d\",\r\n      multiplier:1200\r\n   },\r\n   deaths:{\r\n      hex:\"#fb4443\",\r\n      multiplier:2000\r\n   }\r\n}\r\nexport const sortData=(data) =>{\r\n   const sortedData=[...data];\r\n   sortedData.sort((a,b)=>{\r\n      if(a.cases>b.cases) {\r\n         return -1\r\n      }\r\n      else{\r\n         return 1\r\n      }\r\n   })\r\n   return sortedData\r\n}\r\n\r\nexport const showDataOnMap=(data,casesType=\"cases\") =>{\r\n   data.map(country=>{\r\n      <Circle center={[country.countryInfo.lat,country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      radius={Math.sqrt(country[casesType])*casesTypeColors[casesType].multiplier} >\r\n         <Popup>\r\n            <div className=\"info-container\">\r\n            <div className=\"info-flag\"\r\n            style={{backgroundImage:`url(${country.countryInfo.flag})`}}>\r\n                  <div className=\"info-name\">{country.countryInfo.flag}</div>\r\n                  \r\n\r\n            \r\n               \r\n            </div>\r\n            </div>\r\n         </Popup>\r\n      </Circle>\r\n   })\r\n\r\n}\r\n\r\nexport const prettyPrintStat=(stat)=>\r\n   stat ? `+${numeral(stat).format(\"0.0a\")}`:\"+0\";\r\n","import React from \"react\"\r\nimport \"./map.css\"\r\nimport { MapContainer as LeafletMap, TileLayer} from \"react-leaflet\";\r\n\r\nimport {showDataOnMap} from \"./util\"\r\n\r\n\r\nfunction Map({countries,casesType,center,zoom}) {\r\n   return (\r\n      <div className=\"map\">\r\n         <LeafletMap center={center} zoom ={zoom} >\r\n            <TileLayer\r\n            url=\"https://{s}.title.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            attribution='$copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a>'\r\n            />\r\n            {showDataOnMap(countries,casesType)}\r\n         </LeafletMap>\r\n\r\n      </div>\r\n   )\r\n}\r\nexport default Map;","import React from \"react\"\r\nimport \"./Table.css\"\r\nimport numeral from \"numeral\"\r\n\r\nfunction Table  ({countries}) {\r\n   return (\r\n      <div className=\"table\">\r\n       {countries.map(({country,cases})=>{\r\n          <tr>\r\n            <td>{country}</td>\r\n            <td><strong>{numeral(cases).format()}</strong></td>\r\n          </tr>\r\n       })}\r\n      </div>\r\n   )\r\n\r\n}\r\n\r\nexport default Table\r\n\r\n\r\n\r\n","import React from \"react\"\r\nimport \"./InfoBox.css\"\r\nimport {Card,CardContent,Typography} from \"@material-ui/core\"\r\n\r\n\r\nfunction InfoBox ({title,cases,total,isRed,active,...props}) {\r\n   return (\r\n      <Card\r\n         onClick={props.onClick}\r\n         className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"}`}>\r\n            <CardContent>\r\n               <Typography className=\"infoBox_title\" color=\"textSecondary\">\r\n                  {title}\r\n\r\n               </Typography>\r\n               <h2 className={`infoBox_cases ${!isRed && \"infoBox_cases--green\"}`}>\r\n                  {cases}\r\n               </h2>\r\n               <Typography color=\"textSecondary\">\r\n               {total}TOTAL\r\n               </Typography>\r\n\r\n            </CardContent>\r\n\r\n      </Card> \r\n\r\n   )\r\n}\r\n\r\nexport default InfoBox","import React, { useEffect,useState } from \"react\"\r\nimport { Line } from \"react-chartjs-2\"\r\nimport numeral from \"numeral\"\r\n\r\n\r\nconst options={\r\n   legend: {\r\n      display:false,\r\n\r\n\r\n   },\r\n   elements:{\r\n      point:{\r\n         radius:0,\r\n      },\r\n   },\r\n   maintainAspectRatio:false,\r\n   tooltips:{\r\n      mode:\"index\",\r\n      intersect:false,\r\n      callbacks:{\r\n         label:function(tooltipItem,data) {\r\n            return numeral(tooltipItem.value).format(\"+0,0\")\r\n\r\n         },\r\n\r\n      },\r\n   },\r\n   scales:{\r\n      xAxes:[\r\n         {\r\n            type:\"time\",\r\n            time:{\r\n               format:\"MM/DD/YY\",\r\n               tooltipFormat:\"11\",\r\n            },\r\n\r\n         },\r\n      ],\r\n      yAxes:[\r\n         {\r\n            gridLines:{\r\n               display:false,\r\n            },\r\n            ticks:{\r\n               callback:function(value,index,values) {\r\n                  return numeral(value).format(\"0a\"); \r\n               },\r\n            },\r\n         },\r\n      ],\r\n   },\r\n};\r\n\r\nconst  buildChartData = (data,casesType) =>{\r\n   let chartData=[];\r\n   let lastDataPoint;\r\n   for(let date in data.cases) {\r\n      if(lastDataPoint) {\r\n         let newDataPoint={\r\n            x:date,\r\n            y:data[casesType][date]-lastDataPoint,\r\n\r\n         };\r\n         chartData.push(\r\n            newDataPoint\r\n         )\r\n\r\n      }\r\n      lastDataPoint=data[casesType][date];\r\n   }\r\n\r\n   return chartData;\r\n};\r\n\r\nfunction LineGraph({casesType}){\r\n   const [data,setData]=useState({})\r\n\r\n   useEffect(()=>{\r\n      const fetchData=async()=>{\r\n         await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n         .then((res)=>{\r\n            return res.json();\r\n\r\n         })\r\n         .then((data)=>{\r\n            let chartData=buildChartData(data,casesType)\r\n            setData(chartData)\r\n            console.log(chartData)\r\n         })\r\n      }\r\n      fetchData();\r\n\r\n   },[casesType])\r\n\r\n\r\n   return (\r\n      <div>\r\n       {data.length > 0 && (\r\n          <Line \r\n          data={{\r\n            datasets: [\r\n               {\r\n                  backgroundColor:\"rgba(204,16,52,0.5)\",\r\n                  borderColor:\"#CC1034\",\r\n                  data:data,\r\n  \r\n\r\n               },\r\n            ],\r\n\r\n         }}\r\n         options={options}\r\n          />\r\n\r\n           \r\n        \r\n       )}\r\n      </div>\r\n   )\r\n\r\n   \r\n\r\n \r\n\r\n   \r\n}\r\n\r\nexport default LineGraph;","import React,{useState,useEffect} from \"react\"\nimport {\n  MenuItem,FormControl,Select,Card,CardContent\n} from \"@material-ui/core\"\nimport \"./App.css\"\nimport Map from \"./Map\"\nimport Table from \"./Table\"\nimport InfoBox from \"./InfoBox\"\nimport {sortData,prettyPrintStat} from \"./util\"\nimport LineGraph from \"./LineGraph\"\nimport \"leaflet/dist/leaflet.css\"\n\n\nfunction App() {\n  const [countries,setCountries]=useState([]);\n  const [country,setCountry]=useState(\"worldwide\");\n  const [countryInfo,setCountryInfo]=useState({})\n  const [tableData,setTableData]=useState([])\n  const [mapCenter,setMapCenter]=useState({lat:34.8076,lng:-40.4796})\n  const [mapZoom,setMapZoom]=useState(3)\n  const [mapCountries,setMapCountries]=useState([])\n  const [casesType,setCasesType]=useState(\"cases\")\n\n\n  useEffect(()=>{\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then((res)=>\n      res.json()\n    )\n    .then((data)=>{\n      setCountryInfo(data)\n    })\n  },[]);\n  useEffect(()=>{\n    const getCountriesData=async()=>{\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((res)=>res.json())\n      .then((data)=>{\n        const countries=data.map((country)=>(\n          {\n            name:country.country,\n            value:country.countryInfo.iso2\n          }\n        ));\n        const sortedData=sortData(data)\n        setTableData(sortedData);\n        setMapCountries(data)\n        setCountries(countries)\n\n      })\n    }\n    getCountriesData()\n  },[]);\n  const onCountryChange=async (event)=>{\n    const countryCode=event.target.value;\n    setCountry(countryCode)\n    const url=countryCode===\"worldwide\"?\"https://disease.sh/v3/covid-19/all\":`https://disease.sh/v3/covid-19/countries/${countryCode}`\n    await fetch(url)\n    .then(res=>res.json())\n    .then(data=>{\n      setCountry(countryCode)\n      setCountryInfo(data)\n      setMapCenter([data.countryInfo.lat,data.countryInfo.long])\n      setMapZoom(4)\n\n    })\n\n  }\n  console.log(countryInfo)\n\n\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n      <div className=\"app_header\">\n      <h1>Covid Tracker</h1>\n      <FormControl className=\"app_dropdown\">\n        <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n          <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n          {\n            countries.map(country=>{\n              <MenuItem value={country.value}>{country.name}</MenuItem>\n            })\n          }\n        </Select>\n      </FormControl>\n      </div>\n      <div className=\"app_stats\">\n      <InfoBox isRed={true} active={casesType===\"cases\"} onClick={e=>setCasesType(\"cases\")} title=\"Corona cases\" total={prettyPrintStat(countryInfo.cases)}\n      cases={prettyPrintStat(countryInfo.todayCases)} />\n      <InfoBox isRed={false} active={casesType===\"recovered\"} onClick={e=>setCasesType(\"recovered\")} title=\"Recovered\" total={prettyPrintStat(countryInfo.recovered)}\n      cases={prettyPrintStat(countryInfo.todayRecovered)} />\n      <InfoBox isRed={true} active={casesType===\"deaths\"} onClick={e=>setCasesType(\"deaths\")} title=\"Deaths\" total={prettyPrintStat(countryInfo.deaths)}\n      cases={prettyPrintStat(countryInfo.todayDeaths)} />\n      \n      </div>\n      <Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom} />\n\n      </div>\n      <Card class Name=\"app_right\">\n          <CardContent>\n            <h4>Live By Country</h4>\n            <Table countries={tableData} />\n            <h3 className=\"app_graphTitle\">WorldWide new {casesType}</h3>\n            <LineGraph className=\"app_graph\" casesType={casesType} />\n\n\n          </CardContent>\n\n      </Card>\n    </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}